// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image      String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  editorHistory NovelEditorHistory[]
  searchQueries SearchQuery[]
  searchBookmarks SearchBookmark[]
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId  
  userId    String   @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SearchQuery {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  query     String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  searchResponse SearchResponse?
}

model SearchResponse {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  total     Int
  offset    Int
  next      Int
  data      SearchPaperResult[]
  searchQuery SearchQuery @relation(fields: [searchQueryId], references: [id], onDelete: Cascade)
  searchQueryId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchPaperResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  paperId   String   @unique
  title     String
  url       String
  abstract  String?
  year      Int
  referenceCount Int
  citationCount Int
  influentialCitationCount Int
  tldr      Json?
  journal   Json?
  authors   Json
  publicationTypes String[]
  isOpenAccess Boolean
  openAccessPdf Json?
  searchResponse SearchResponse @relation(fields: [searchResponseId], references: [id], onDelete: Cascade)
  searchResponseId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookmarks SearchBookmark[]
  bookmarked Boolean @default(false)
}

model SearchBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  paperId   String   
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  paper SearchPaperResult @relation(fields: [paperId], references: [paperId])

  @@unique([userId, paperId])
}


model NovelEditorHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  route     String   
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique ([userId, route])
}